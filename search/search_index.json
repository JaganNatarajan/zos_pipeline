{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Purpose of this documentation The purpose of this documentation is to install, configure and build a Z DevOps pipeline. The tools that would installed / configured are Rocket Git for z/OS Rocket Software's port of GIT SCM for z/OS. One key step in the enterprise DevOps solution for z/OS is to migrate the source control from the legacy source control tools to the latest ones. be to align the mainframe with the enterprise wide source control tools. The most popular one in this space is GIT. Rocket's GIT for z/OS runs on the Unix System Services (USS) on the z/OS IBM Dependency Based Build (DBB) Traditionally, mainframe source control tools also were also used as the build & deploy tools. This severly restricted the number of test environments that were available for testing. With agile and parallel developments, the need for test environments increased - calling for a standalone build and deploy processes. IBM Dependency Based Build (DBB), is a some blue text build module for mainframe application that runs on the USS on z/OS and comes with a groovy based build framework - zAppBuild Buildframe work - zAppBuild IBM provides a module for mainframe applications to build Jenkins The most popular Continous Integration (CI) orchestrator on the distributed environments is used to orchestrate the pipeline for the mainframes. There are two components to Jenkins - the server, that runs on a Linux hardware and talks to an agent on USS IBM Developer for Z (IDZ) Developers are moving from mainframe ISPF screens to modern IDEs for development. One of the modern IDE for the mainframe is the IBM Developer for Z (IDZ) based on Eclipse. Rational License Key Manager Urban Code Deploy (UCD) Urban Code Deploy (UCD) is one of the most popular deploy tools in the market. UCD is used to deploy mainframe components on z/OS Document v1.0 3 Sep 2022","title":"Home"},{"location":"#purpose-of-this-documentation","text":"The purpose of this documentation is to install, configure and build a Z DevOps pipeline. The tools that would installed / configured are","title":"Purpose of this documentation"},{"location":"#rocket-git-for-zos","text":"Rocket Software's port of GIT SCM for z/OS. One key step in the enterprise DevOps solution for z/OS is to migrate the source control from the legacy source control tools to the latest ones. be to align the mainframe with the enterprise wide source control tools. The most popular one in this space is GIT. Rocket's GIT for z/OS runs on the Unix System Services (USS) on the z/OS","title":"Rocket Git for z/OS"},{"location":"#ibm-dependency-based-build-dbb","text":"Traditionally, mainframe source control tools also were also used as the build & deploy tools. This severly restricted the number of test environments that were available for testing. With agile and parallel developments, the need for test environments increased - calling for a standalone build and deploy processes. IBM Dependency Based Build (DBB), is a some blue text build module for mainframe application that runs on the USS on z/OS and comes with a groovy based build framework - zAppBuild","title":"IBM Dependency Based Build (DBB)"},{"location":"#buildframe-work-zappbuild","text":"IBM provides a module for mainframe applications to build","title":"Buildframe work - zAppBuild"},{"location":"#jenkins","text":"The most popular Continous Integration (CI) orchestrator on the distributed environments is used to orchestrate the pipeline for the mainframes. There are two components to Jenkins - the server, that runs on a Linux hardware and talks to an agent on USS","title":"Jenkins"},{"location":"#ibm-developer-for-z-idz","text":"Developers are moving from mainframe ISPF screens to modern IDEs for development. One of the modern IDE for the mainframe is the IBM Developer for Z (IDZ) based on Eclipse.","title":"IBM Developer for Z (IDZ)"},{"location":"#rational-license-key-manager","text":"","title":"Rational License Key Manager"},{"location":"#urban-code-deploy-ucd","text":"Urban Code Deploy (UCD) is one of the most popular deploy tools in the market. UCD is used to deploy mainframe components on z/OS Document v1.0 3 Sep 2022","title":"Urban Code Deploy (UCD)"},{"location":"index_1/","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"index_1/#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"index_1/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"index_1/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"install_components/","text":"Installation Components The earlier section, gave an overview of the different tools that make up the pipeline for z/OS. Here and the next sections, we will see the different components of the tools (server / agent), where they are installed (desktop, Linux or USS), the prerequisites and how they interact with each other Note the different components of the tool - agent / server where it needs to be installed - deskptop / Linux server / USS prerequisites for the installation the communication channels between the tools - ports Product Installed on Notes Git for z/OS USS on z/OS IBM Dependency Based Build USS on z/OS IBM zAppBuild Groovy scripts USS on z/OS Jenkins - Server Linux Jenkins - agent USS on z/OS IBM Developer for Z Windows /Mac Urban Code Deploy - server Linux Urban Code Deploy - agent USS on z/OS Rational License Key Manger Linux Git Installation Git is ported to mainframe by Rocket Software . Git installation happens through the Miniconda installation on the USS. The following are the What Requirements System Requirements z/OS v2.2 or more IBM Z EC12 or BC12 later 2 - 3 GB of space Access to the site Rocket Community Files to be downloaded miniconda-zos-x.y-yyyy-mm-dd.run appdev manifest 1.x.y.txt zOS Miniconda Documentation.pdf System access Access to the USS folder. No special permissions or super user permissions needed Installation on ZD&T If the installation is on ZD&T make sure that the USS folder where it is installed has minimum 2 GB of data. Else make sure you mount necessary data before starting the installation Add the volume to the BPXPRM00 of the installation Installation Steps Refer to zOS Miniconda Installation Demo - YouTube for installation details FTP the files miniconda-zos-x.y-yyyy-mm-dd.run & appdev manifest 1.x.y.txt to USS using the binary mode Log in to the USS folder throught a SSH client like PuTTy, change the directory where the above components are copied Set the tags for the files chmod +x miniconda-zos-<X.Y>-<yyyy-mm-dd>.run chtag -tc 819 appdev_manifest-<1.x.y>.txt Set the following environments variable to run the installation scripts export _BPXK_AUTOCVT=ON export _CEE_RUNOPTS='FILETAG(AUTOCVT,AUTOTAG) POSIX(ON)' Execute the below installation script. Here the path parameter is optional. If the path is not specified then the installation happens on your home directory /u/<userid> ./miniconda-zos-<X.Y>-<yyyy-mm-dd>.run --path <miniconda_installation_path> Note During the installation you would be prompted for configuring Rocket's secure conda server. Configure to use Rocket's secure conda server? [Y/n]. You could respond with a n to this Tip Please note down the miniconda installation path as this would be needed in the configuration section Configurations The .profile and the .bashrc files need to be editied to add the below lines. These files can be edited by opening them in vi editor . This has to be done to every user who needs to use miniconda .profile export _BPXK_AUTOCVT=ON export _CEE_RUNOPTS=\"FILETAG(AUTOCVT,AUTOTAG) POSIX(ON)\" SHELL=<miniconda_installation_path>/bin/bash exec $SHELL .bashrc . <miniconda_installation_path>/etc/profile.d/conda.sh","title":"Installation Components"},{"location":"install_components/#installation-components","text":"The earlier section, gave an overview of the different tools that make up the pipeline for z/OS. Here and the next sections, we will see the different components of the tools (server / agent), where they are installed (desktop, Linux or USS), the prerequisites and how they interact with each other Note the different components of the tool - agent / server where it needs to be installed - deskptop / Linux server / USS prerequisites for the installation the communication channels between the tools - ports Product Installed on Notes Git for z/OS USS on z/OS IBM Dependency Based Build USS on z/OS IBM zAppBuild Groovy scripts USS on z/OS Jenkins - Server Linux Jenkins - agent USS on z/OS IBM Developer for Z Windows /Mac Urban Code Deploy - server Linux Urban Code Deploy - agent USS on z/OS Rational License Key Manger Linux","title":"Installation Components"},{"location":"install_components/#git-installation","text":"Git is ported to mainframe by Rocket Software . Git installation happens through the Miniconda installation on the USS. The following are the What Requirements System Requirements z/OS v2.2 or more IBM Z EC12 or BC12 later 2 - 3 GB of space Access to the site Rocket Community Files to be downloaded miniconda-zos-x.y-yyyy-mm-dd.run appdev manifest 1.x.y.txt zOS Miniconda Documentation.pdf System access Access to the USS folder. No special permissions or super user permissions needed Installation on ZD&T If the installation is on ZD&T make sure that the USS folder where it is installed has minimum 2 GB of data. Else make sure you mount necessary data before starting the installation Add the volume to the BPXPRM00 of the installation","title":"Git Installation"},{"location":"install_components/#installation-steps","text":"Refer to zOS Miniconda Installation Demo - YouTube for installation details FTP the files miniconda-zos-x.y-yyyy-mm-dd.run & appdev manifest 1.x.y.txt to USS using the binary mode Log in to the USS folder throught a SSH client like PuTTy, change the directory where the above components are copied Set the tags for the files chmod +x miniconda-zos-<X.Y>-<yyyy-mm-dd>.run chtag -tc 819 appdev_manifest-<1.x.y>.txt Set the following environments variable to run the installation scripts export _BPXK_AUTOCVT=ON export _CEE_RUNOPTS='FILETAG(AUTOCVT,AUTOTAG) POSIX(ON)' Execute the below installation script. Here the path parameter is optional. If the path is not specified then the installation happens on your home directory /u/<userid> ./miniconda-zos-<X.Y>-<yyyy-mm-dd>.run --path <miniconda_installation_path> Note During the installation you would be prompted for configuring Rocket's secure conda server. Configure to use Rocket's secure conda server? [Y/n]. You could respond with a n to this Tip Please note down the miniconda installation path as this would be needed in the configuration section","title":"Installation Steps"},{"location":"install_components/#configurations","text":"The .profile and the .bashrc files need to be editied to add the below lines. These files can be edited by opening them in vi editor . This has to be done to every user who needs to use miniconda .profile export _BPXK_AUTOCVT=ON export _CEE_RUNOPTS=\"FILETAG(AUTOCVT,AUTOTAG) POSIX(ON)\" SHELL=<miniconda_installation_path>/bin/bash exec $SHELL .bashrc . <miniconda_installation_path>/etc/profile.d/conda.sh","title":"Configurations"}]}